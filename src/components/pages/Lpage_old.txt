    const sliders = document.querySelectorAll("[data-slider]");

    const initSlider = function (currentSlider) {
    
      const sliderContainer = currentSlider.querySelector("[data-slider-container]");
      const sliderPrevBtn = currentSlider.querySelector("[data-slider-prev]");
      const sliderNextBtn = currentSlider.querySelector("[data-slider-next]");
    
      let totalSliderVisibleItems = Number(getComputedStyle(currentSlider).getPropertyValue("--slider-items"));
      let totalSlidableItems = sliderContainer.childElementCount - totalSliderVisibleItems;
    
      let currentSlidePos = 0;
    
      const moveSliderItem = function () {
        sliderContainer.style.transform = `translateX(-${sliderContainer.children[currentSlidePos].offsetLeft}px)`;
      }
      
      
      const slideNext = function () {
        const slideEnd = currentSlidePos >= totalSlidableItems;
    
        if (slideEnd) {
          currentSlidePos = 0;
        } else {
          currentSlidePos++;
        }
    
        moveSliderItem();
      }
    
      sliderNextBtn.addEventListener("click", slideNext);


      const slidePrev = function () {
        if (currentSlidePos <= 0) {
          currentSlidePos = totalSlidableItems;
        } else {
          currentSlidePos--;
        }
    
        moveSliderItem();
        }
    
      sliderPrevBtn.addEventListener("click", slidePrev);
    
      const dontHaveExtraItem = totalSlidableItems <= 0;
      if (dontHaveExtraItem) {
        sliderNextBtn.style.display = 'none';
        sliderPrevBtn.style.display = 'none';
      }
    
      currentSlider.addEventListener("wheel", function (event) {
        if (event.shiftKey && event.deltaY > 0) slideNext();
        if (event.shiftKey && event.deltaY < 0) slidePrev();
      });
    
     
    
      window.addEventListener("resize", function () {
        totalSliderVisibleItems = Number(getComputedStyle(currentSlider).getPropertyValue("--slider-items"));
        totalSlidableItems = sliderContainer.childElementCount - totalSliderVisibleItems;
    
        moveSliderItem();
      });
    }
    
    for (let i = 0, len = sliders.length; i < len; i++) { initSlider(sliders[i]); }
    
gpt-------------------------

import React, { useState, useEffect } from 'react';

const SliderComponent = () => {
  const [totalSliderVisibleItems, setTotalSliderVisibleItems] = useState(0);
  const [totalSlidableItems, setTotalSlidableItems] = useState(0);
  const [currentSlidePos, setCurrentSlidePos] = useState(0);

  useEffect(() => {
    const moveSliderItem = () => {
      // A csúszka elemek mozgatása
      // ...
    };

    const slideNext = () => {
      // Következő csúszka elemre való váltás
      // ...
    };

    const slidePrev = () => {
      // Előző csúszka elemre való váltás
      // ...
    };

    // Egyéb inicializációs és eseménykezelő funkciók

    // useEffect és más React életciklus metódusok használata a szükséges inicializációhoz és eseménykezelőkhöz

    return () => {
      // Ellenőrzés vagy takarítás a komponens törlésekor
    };
  }, []); // A függőségi tömb üres, tehát az useEffect csak egyszer fut le

  return (
    <div>
      {/* Csúszka elemek és egyéb DOM struktúra */}
    </div>
  );
};

export default SliderComponent;

-----------------------

import SliderComponent from './SliderComponent';

const App = () => {
  return (
    <div>
      {/* Egyéb komponensek */}
      <SliderComponent />
      {/* Egyéb komponensek */}
    </div>
  );
};

export default App;

-----------------------------------

import React, { useEffect, useState } from 'react';

const SliderComponent = () => {
  const initSlider = function (currentSlider) {
    // Függvény tartalma
  };

  const moveSliderItem = function () {
    // Függvény tartalma
  };

  const slideNext = function () {
    // Függvény tartalma
  };

  const slidePrev = function () {
    // Függvény tartalma
  };

  useEffect(() => {
    // Inicializáció és eseménykezelők
  }, []);

  return (
    <div>
      {/* Komponens tartalma */}
    </div>
  );
};

export default SliderComponent;
